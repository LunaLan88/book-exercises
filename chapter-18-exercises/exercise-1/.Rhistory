# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
nyt_key <- TieWrcIAGGvYhYaPtXDuBEf5xkppzHTj
nyt_key <- "TieWrcIAGGvYhYaPtXDuBEf5xkppzHTj"
# Use `source()` to load your API key variable from the `apikey.R` file you made.
nyt_key <- "TieWrcIAGGvYhYaPtXDuBEf5xkppzHTj"
query_params <- list(api_key = nyt_key)
response <- GET(paste0(base_uri, resource), query = query_params)
resource <- "reviews/search.json"
response <- GET(paste0(base_uri, resource), query = query_params)
query_params_list <- list(api_key = nyt_key, query = movie_name)
response <- GET(paste0(base_uri, resource), query = query_params_list)
response_text <- content(response, "text")
response_text <- content(response, "text", encoding = "UTF-8")
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
typeof(data)
View(data)
response <- GET(paste0(base_uri, resource), query = query_params_list)
query_params_list <- list(api_key = nyt_key, query = movie_name)
response <- GET(paste0(base_uri, resource), query = query_params_list)
query_params_list <- list("api_key" = nyt_key, "query" = movie_name)
response <- GET(paste0(base_uri, resource), query = query_params_list)
response
query_params <- list("api-key" = nyt_apikey, query = movie_name)
response <- GET(paste0(base_uri, resource), query = query_params)
query_params <- list("api-key" = nyt_key, query = movie_name)
response <- GET(paste0(base_uri, resource), query = query_params)
body <- content(response, "text", encoding = "UTF-8")
response
movie_name <- "Star Wars"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
resource <- "reviews/search.json"
query_params <- list("api-key" = nyt_key, query = movie_name)
response <- GET(paste0(base_uri, resource), query = query_params)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
response
View(data)
I like writing **reports**
library("knitr")
I like writing **reports**
library("knitr")
```{r example, echo =FALSE}
numbers <- runif(1:100)
hist(numbers)
```
```{r example, echo =FALSE}
```{r example, echo = FALSE}
View(results)
library("dplyr")
library("jsonlite")
library("httr")
# Accessing the Data API
base_uri <- "https://api.themoviedb.org/3"
# Assign this key to a variable tmdb_key in a separate "key script"
# Use source() to "run" the apikey.R file
source("apikey.R")
# Define a variable key_param that is a list of URL parameters.
key_param <- list(api_key = tmbd_key)
# Trending Actors
# Define a function called get_trending_table
get_trending_table <- function(){
end_point <- "/trending/person/week"
response <- GET(paste0(base_uri ,end_point), query = key_param)
response_text <- content(response, "text")
response_R <- fromJSON(response_text)
results <- response_R$results
acting <- results %>%
filter(known_for_department == "Acting") %>%
mutate(profile_path = paste0("https://image.tmdb.org/t/p/h100/", profile_path)) %>%
select("name", "profile_path") %>%
top_n(5)
return(acting)
}
View(acting)
# Specific Actor Data
# Define a function called get_actor_data()
get_actor_data <- function(name1){
end_point1 <- "/search/person"
params_list <- list(query = name1, api_key = tmbd_key)
resp <- GET(paste0(base_uri, end_point1), query = params_list)
body <- content(resp, "text")
body_R <- fromJSON(body)
resu <- body_R$results
firstline <- resu[1,]
id <- firstline %>% select(id)
movies <- firstline$known_for[[1]]
titles <- c(movies %>% select(title))
details_endpoint <- paste0("/person/",id)
res <- GET(paste0(base_uri, details_endpoint), query = key_param)
restext <- content(res, "text")
resR <- fromJSON(restext)
bio <- resR$biography
imbdid <- resR$imdb_id
person <- list(name = name1, id_ = id, imbd_id = imbdid, biography = bio)
return(person)
}
# Analysis of Actor
# My question: which film is the most popular one for some specific actors?
analyze_actor <- function(id1){
endpoint <- paste0("/person/", id1, "/movie_credits")
response_web <- GET(paste0(base_uri, endpoint), query = key_param)
txt <- content(response_web, "text")
responseR <- fromJSON(txt)
genre <- response_R$results
specific_id <- genre %>%
filter(id == id1)
films <- specific_id$known_for[[1]]
most_popular <- films %>%
filter(popularity == max(popularity)) %>%
pull(name)
return(most_popular)
}
View(results)
```{r setup, include=FALSE}
```{r setup, include=FALSE}
```{r setup, include=FALSE}
```{r setup, include=FALSE}
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
source("analysis.R")
actor_name <- "Jet_Li"
source("analysis.R")
actor_name <- "Jet_Li"
get_trending_table <- function(){
end_point <- "/trending/person/week"
response <- GET(paste0(base_uri ,end_point), query = key_param)
response_text <- content(response, "text")
response_R <- fromJSON(response_text)
results <- response_R$results
acting <- results %>%
filter(known_for_department == "Acting") %>%
mutate(profile_path = paste0("https://image.tmdb.org/t/p/h100/", profile_path)) %>%
select("name", "profile_path") %>%
top_n(5)
return(acting)
}
get_trending_table <- function(){
end_point <- "/trending/person/week"
response <- GET(paste0(base_uri ,end_point), query = key_param)
response_text <- content(response, "text")
response_R <- fromJSON(response_text)
results <- response_R$results
acting <- results %>%
filter(known_for_department == "Acting") %>%
mutate(profile_path = paste0("https://image.tmdb.org/t/p/h100/", profile_path)) %>%
select("name", "profile_path") %>%
top_n(5)
return()
}
get_trending_table <- function(){
end_point <- "/trending/person/week"
response <- GET(paste0(base_uri ,end_point), query = key_param)
response_text <- content(response, "text")
response_R <- fromJSON(response_text)
results <- response_R$results
acting <- results %>%
filter(known_for_department == "Acting") %>%
mutate(profile_path = paste0("https://image.tmdb.org/t/p/h100/", profile_path)) %>%
select("name", "profile_path") %>%
top_n(5)
}
get_trending_table()
analyze_actor(7024)
library("dplyr")
library("jsonlite")
library("httr")
# Accessing the Data API
base_uri <- "https://api.themoviedb.org/3"
# Assign this key to a variable tmdb_key in a separate "key script"
# Use source() to "run" the apikey.R file
source("apikey.R")
# Define a variable key_param that is a list of URL parameters.
key_param <- list(api_key = tmbd_key)
# Trending Actors
# Define a function called get_trending_table
get_trending_table <- function(){
end_point <- "/trending/person/week"
response <- GET(paste0(base_uri ,end_point), query = key_param)
response_text <- content(response, "text")
response_R <- fromJSON(response_text)
results <- response_R$results
acting <- results %>%
filter(known_for_department == "Acting") %>%
mutate(profile_path = paste0("https://image.tmdb.org/t/p/h100/", profile_path)) %>%
select("name", "profile_path") %>%
top_n(5)
}
# Specific Actor Data
# Define a function called get_actor_data()
get_actor_data <- function(name1){
end_point1 <- "/search/person"
params_list <- list(query = name1, api_key = tmbd_key)
resp <- GET(paste0(base_uri, end_point1), query = params_list)
body <- content(resp, "text")
body_R <- fromJSON(body)
resu <- body_R$results
firstline <- resu[1,]
id <- firstline %>% select(id)
movies <- firstline$known_for[[1]]
titles <- c(movies %>% select(title))
details_endpoint <- paste0("/person/",id)
res <- GET(paste0(base_uri, details_endpoint), query = key_param)
restext <- content(res, "text")
resR <- fromJSON(restext)
bio <- resR$biography
imbdid <- resR$imdb_id
person <- list(name = name1, id_ = id, imbd_id = imbdid, biography = bio)
return(person)
}
# Analysis of Actor
# My question: which film is the most popular one for some specific actors?
analyze_actor <- function(id1){
endpoint <- paste0("/person/", id1, "/movie_credits")
response_web <- GET(paste0(base_uri, endpoint), query = key_param)
txt <- content(response_web, "text")
responseR <- fromJSON(txt)
genre <- response_R$results
specific_id <- genre %>%
filter(id == id1)
films <- specific_id$known_for[[1]]
most_popular <- films %>%
filter(popularity == max(popularity)) %>%
pull(name)
return(most_popular)
}
analyze_actor(2090)
analyze_actor(2090)
analyze_actor <- function(id1){
endpoint <- paste0("/person/", id1, "/movie_credits")
response_web <- GET(paste0(base_uri, endpoint), query = key_param)
txt <- content(response_web, "text")
responseR <- fromJSON(txt)
genre <- responseR$results
specific_id <- genre %>%
filter(id == id1)
films <- specific_id$known_for[[1]]
most_popular <- films %>%
filter(popularity == max(popularity)) %>%
pull(name)
return(most_popular)
}
analyze_actor("2090")
analyze_actor <- function(id1){
endpoint <- paste0("/person/", id1, "/movie_credits")
response_web <- GET(paste0(base_uri, endpoint), query = key_param)
txt <- content(response_web, "text")
responseR <- fromJSON(txt)
genre <- responseR$results
specific_id <- genre %>%
filter("id" == id1)
films <- specific_id$known_for[[1]]
most_popular <- films %>%
filter(popularity == max(popularity)) %>%
pull(name)
return(most_popular)
}
analyze_actor(2090)
get_actor_data(Jet Li)
get_actor_data(Jet_Li)
get_actor_data(Jet Li)
get_actor_data("Jet Li")
analyze_actor("1336")
id1 <- "1336"
endpoint <- paste0("/person/", id1, "/movie_credits")
response_web <- GET(paste0(base_uri, endpoint), query = key_param)
txt <- content(response_web, "text")
responseR <- fromJSON(txt)
id1 <- "1336"
endpoint <- paste0("/person/", id1, "/movie_credits")
response_web <- GET(paste0(base_uri, endpoint), query = key_param)
txt <- content(response_web, "text")
responseR <- fromJSON(txt)
genre <- responseR$results
View(genre)
View(responseR)
names(responseR)
genre <- responseR$cast
View(genre)
specific_id <- genre %>%
filter(id == id1)
specific_id
View(specific_id)
cast <- responseR$cast
responseR <- fromJSON(txt)
cast <- responseR$cast
View(cast)
id1 <- "1336"
endpoint <- paste0("/person/", id1, "/movie_credits")
response_web <- GET(paste0(base_uri, endpoint), query = key_param)
txt <- content(response_web, "text")
responseR <- fromJSON(txt)
cast <- responseR$cast
most_popular <- cast %>%
filter(popularity == max(popularity)) %>%
pull(name)
id1 <- "1336"
endpoint <- paste0("/person/", id1, "/movie_credits")
response_web <- GET(paste0(base_uri, endpoint), query = key_param)
txt <- content(response_web, "text")
responseR <- fromJSON(txt)
cast <- responseR$cast
most_popular <- cast %>%
filter(popularity == max(popularity)) %>%
pull(original_title)
most_popular
analyze_actor("1336")
analyze_actor(1336)
get_trending_table()
print(get_trending_table())
View(get_trending_table())
analyze_actor <- function(id1){
endpoint <- paste0("/person/", id1, "/movie_credits")
response_web <- GET(paste0(base_uri, endpoint), query = key_param)
txt <- content(response_web, "text")
responseR <- fromJSON(txt)
cast <- responseR$cast
most_popular <- cast %>%
filter(popularity == max(popularity)) %>%
pull(original_title)
return(most_popular)
}
analyze_actor(1336)
analyze_actor(1336)
source("analysis.R")
actor_name <- "Jet_Li"
source("analysis.R")
actor_name <- "Jet_Li"
id1 = "1336"
endpoint <- paste0("/person/", id1, "/movie_credits")
response_web <- GET(paste0(base_uri, endpoint), query = key_param)
txt <- content(response_web, "text")
responseR <- fromJSON(txt)
cast <- responseR$cast
View(cast)
View(cast)
id1 = "1336"
endpoint <- paste0("/person/", id1, "/movie_credits")
response_web <- GET(paste0(base_uri, endpoint), query = key_param)
txt <- content(response_web, "text")
responseR <- fromJSON(txt)
cast <- responseR$cast
film_after_2000 <- cast %>%
mutate(release_date = substr(release_date, 1, 4))
View(film_after_2000)
film_after_2000 <- cast %>%
mutate(release_date = substr(release_date, 1, 4)) %>%
filter(release > 2000)
film_after_2000 <- cast %>%
mutate(release_date = substr(release_date, 1, 4)) %>%
filter(release_date > 2000)
View(film_after_2000)
film_after_2000 <- cast %>%
mutate(release_date = substr(release_date, 1, 4)) %>%
filter(release_date > 2000) %>%
mean(vote_count)
film_after_2000 <- cast %>%
mutate(release_date = substr(release_date, 1, 4)) %>%
filter(release_date > 2000)
View(film_after_2000)
film_after_2000 <- cast %>%
mutate(release_date = substr(release_date, 1, 4)) %>%
filter(release_date > 2000) %>%
count(character)
film_after_2000
film_after_2000 <- cast %>%
mutate(release_date = substr(release_date, 1, 4)) %>%
filter(release_date > 2000)
View(film_after_2000)
nrow(film_after_2000)
cast <- responseR$cast
after_2000 <- cast %>%
mutate(release_date = substr(release_date, 1, 4)) %>%
filter(release_date > 2000)
number <- nrow(film_after_2000)
number
library("knitr")
df <- get_trending_table()
kable(df)
acting <- results %>%
filter(known_for_department == "Acting") %>%
mutate(profile_path = paste0("![](https://image.tmdb.org/t/p/h100/", profile_path, ")")) %>%
select("name", "profile_path") %>%
top_n(5)
}
acting <- results %>%
filter(known_for_department == "Acting") %>%
mutate(profile_path = paste0("![](https://image.tmdb.org/t/p/h100/", profile_path)) %>%
select("name", "profile_path") %>%
top_n(5)
get_trending_table <- function(){
end_point <- "/trending/person/week"
response <- GET(paste0(base_uri ,end_point), query = key_param)
response_text <- content(response, "text")
response_R <- fromJSON(response_text)
results <- response_R$results
acting <- results %>%
filter(known_for_department == "Acting") %>%
mutate(profile_path = paste0("![](https://image.tmdb.org/t/p/h100/", profile_path)) %>%
select("name", "profile_path") %>%
top_n(5)
}
library("knitr")
df <- get_trending_table()
kable(df)
# Trending Actors
# Define a function called get_trending_table
get_trending_table <- function(){
end_point <- "/trending/person/week"
response <- GET(paste0(base_uri ,end_point), query = key_param)
response_text <- content(response, "text")
response_R <- fromJSON(response_text)
results <- response_R$results
acting <- results %>%
filter(known_for_department == "Acting") %>%
mutate(profile_path = paste0("![](https://image.tmdb.org/t/p/h100/", profile_path)) %>%
select(name, profile_path) %>%
top_n(5)
}
get_trending_table()
View(get_trending_table())
df <- get_trending_table()
kable(df)
df <- get_trending_table()
kable(df)
# Trending Actors
# Define a function called get_trending_table
get_trending_table <- function(){
end_point <- "/trending/person/week"
response <- GET(paste0(base_uri ,end_point), query = key_param)
response_text <- content(response, "text")
response_R <- fromJSON(response_text)
results <- response_R$results
acting <- results %>%
filter(known_for_department == "Acting") %>%
mutate(profile_path = paste0("![](https://image.tmdb.org/t/p/h100", profile_path)) %>%
select(name, profile_path) %>%
top_n(5)
}
df <- get_trending_table()
kable(df)
acting <- results %>%
filter(known_for_department == "Acting") %>%
mutate(profile_path = paste0("![](https://image.tmdb.org/t/p/h100", profile_path, ")")) %>%
select(name, profile_path) %>%
top_n(5)
# Trending Actors
# Define a function called get_trending_table
get_trending_table <- function(){
end_point <- "/trending/person/week"
response <- GET(paste0(base_uri ,end_point), query = key_param)
response_text <- content(response, "text")
response_R <- fromJSON(response_text)
results <- response_R$results
acting <- results %>%
filter(known_for_department == "Acting") %>%
mutate(profile_path = paste0("![](https://image.tmdb.org/t/p/h100", profile_path, ")")) %>%
select(name, profile_path) %>%
top_n(5)
}
library("knitr")
df <- get_trending_table()
kable(df)
library("knitr")
df <- get_trending_table()
kable(df)
I wrote this report for my Info201 homework!
## Trending Actors
Who are the **top trending_count trending people** on TMDB(week of 2020-01-29)?
View(df)
get_trending_table <- function(){
end_point <- "/trending/person/week"
response <- GET(paste0(base_uri ,end_point), query = key_param)
response_text <- content(response, "text")
response_R <- fromJSON(response_text)
results <- response_R$results
acting <- results %>%
filter(known_for_department == "Acting") %>%
mutate(profile_path = paste0("![](", profile_path, ")")) %>%
select(name, profile_path) %>%
top_n(5)
}
get_trending_table <- function(){
end_point <- "/trending/person/week"
response <- GET(paste0(base_uri ,end_point), query = key_param)
response_text <- content(response, "text")
response_R <- fromJSON(response_text)
results <- response_R$results
acting <- results %>%
filter(known_for_department == "Acting") %>%
mutate(profile_path = paste0("![](https://image.tmdb.org/t/p/h100", profile_path, ")")) %>%
select(name, profile_path) %>%
top_n(5)
}
library("knitr")
df <- get_trending_table()
kable(df)
library("knitr")
df <- get_trending_table()
kable(df)
